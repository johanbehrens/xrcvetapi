module.exports = {
	// Feed control sequences
	CTL_LF: new Buffer([0x0a]), // Print and line feed
	CTL_FF: new Buffer([0x0c]), // Form feed
	CTL_CR: new Buffer([0x0d]), // Carriage return
	CTL_HT: new Buffer([0x09]), // Horizontal tab
	CTL_SET_HT: new Buffer([0x1b, 0x44]), // Set horizontal tab positions
	CTL_VT: new Buffer([0x1b, 0x64, 0x04]), // Vertical tab

	// Printer hardware
	HW_INIT: new Buffer([0x1b, 0x40]), // Clear data in buffer and reset modes
	HW_SELECT: new Buffer([0x1b, 0x3d, 0x01]), // Printer select
	HW_RESET: new Buffer([0x1b, 0x3f, 0x0a, 0x00]), // Reset printer hardware

	// Cash Drawer
	CD_KICK_2: new Buffer([0x1b, 0x70, 0x00]), // Sends a pulse to pin 2 []
	CD_KICK_5: new Buffer([0x1b, 0x70, 0x01]), // Sends a pulse to pin 5 []

	// Paper
	PAPER_FULL_CUT: new Buffer([0x1d, 0x56, 0x00]), // Full cut paper
	PAPER_PART_CUT: new Buffer([0x1d, 0x56, 0x01]), // Partial cut paper

	// Text format
	TXT_NORMAL: new Buffer([0x1b, 0x21, 0x00]), // Normal text
	TXT_2HEIGHT: new Buffer([0x1b, 0x21, 0x10]), // Double height text
	TXT_2WIDTH: new Buffer([0x1b, 0x21, 0x20]), // Double width text
	TXT_4SQUARE: new Buffer([0x1b, 0x21, 0x30]), // Quad area text
	TXT_UNDERL_OFF: new Buffer([0x1b, 0x2d, 0x00]), // Underline font OFF
	TXT_UNDERL_ON: new Buffer([0x1b, 0x2d, 0x01]), // Underline font 1-dot ON
	TXT_UNDERL2_ON: new Buffer([0x1b, 0x2d, 0x02]), // Underline font 2-dot ON
	TXT_BOLD_OFF: new Buffer([0x1b, 0x45, 0x00]), // Bold font OFF
	TXT_BOLD_ON: new Buffer([0x1b, 0x45, 0x01]), // Bold font ON
	TXT_FONT_A: new Buffer([0x1b, 0x4d, 0x00]), // Font type A
	TXT_FONT_B: new Buffer([0x1b, 0x4d, 0x01]), // Font type B
	TXT_ALIGN_LT: new Buffer([0x1b, 0x61, 0x00]), // Left justification
	TXT_ALIGN_CT: new Buffer([0x1b, 0x61, 0x01]), // Centering
	TXT_ALIGN_RT: new Buffer([0x1b, 0x61, 0x02]), // Right justification

	// Char code table
	CHARCODE_USA: new Buffer([0x1b, 0x52, 0x00]), // USA
	CHARCODE_FRANCE: new Buffer([0x1b, 0x52, 0x01]), // France
	CHARCODE_GERMANY: new Buffer([0x1b, 0x52, 0x02]), // Germany
	CHARCODE_UK: new Buffer([0x1b, 0x52, 0x03]), // U.K.
	CHARCODE_DENMARK1: new Buffer([0x1b, 0x52, 0x04]), // Denmark I
	CHARCODE_SWEDEN: new Buffer([0x1b, 0x52, 0x05]), // Sweden
	CHARCODE_ITALY: new Buffer([0x1b, 0x52, 0x06]), // Italy
	CHARCODE_SPAIN1: new Buffer([0x1b, 0x52, 0x07]), // Spain I
	CHARCODE_JAPAN: new Buffer([0x1b, 0x52, 0x08]), // Japan
	CHARCODE_NORWAY: new Buffer([0x1b, 0x52, 0x09]), // Norway
	CHARCODE_DENMARK2: new Buffer([0x1b, 0x52, 0x0A]), // Denmark II
	CHARCODE_SPAIN2: new Buffer([0x1b, 0x52, 0x0B]), // Spain II
	CHARCODE_LATINA: new Buffer([0x1b, 0x52, 0x0C]), // Latin America
	CHARCODE_KOREA: new Buffer([0x1b, 0x52, 0x0D]), // Korea
	CHARCODE_SLOVENIA: new Buffer([0x1b, 0x52, 0x0E]), // Slovenia
	CHARCODE_CHINA: new Buffer([0x1b, 0x52, 0x0F]), // China
	CHARCODE_VIETNAM: new Buffer([0x1b, 0x52, 0x10]), // Vietnam
	CHARCODE_ARABIA: new Buffer([0x1b, 0x52, 0x11]), // ARABIA


	// Barcode format
	BARCODE_UPC_A: 0, //digits only. length: 11-12
	BARCODE_UPC_E: 1, //digits only. length: 11-12. don`t work
	BARCODE_EAN13: 2, //digits only. length: 12-13
	BARCODE_EAN8: 3, //digits only. length: 7-8
	BARCODE_CODE39: 4, //[0-9 A-Z $ % + - . /]. length: 1-12
	BARCODE_I25: 5, //digits only. length: 1-25
	BARCODE_CODEBAR: 6, //[0-9 A-D $]. length: 1-15
	BARCODE_CODE93: 7, //all ascii table (0-127). length: 1-19
	BARCODE_CODE128: 8, //all ascii table (0-127). length: 2-18
	BARCODE_CODE11: 9, //digits and dash (-). length: 21
	BARCODE_MSI: 10, //digits only. length: 16


	// QR Code
	QRCODE_MODEL1: new Buffer([0x1d, 0x28, 0x6b, 0x04, 0x00, 0x31, 0x41, 0x31, 0x00]), // Model 1
	QRCODE_MODEL2: new Buffer([0x1d, 0x28, 0x6b, 0x04, 0x00, 0x31, 0x41, 0x32, 0x00]), // Model 2
	QRCODE_MODEL3: new Buffer([0x1d, 0x28, 0x6b, 0x04, 0x00, 0x31, 0x41, 0x33, 0x00]), // Model 3

	QRCODE_CORRECTION_L: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x45, 0x30]), // Correction level: L - 7%
	QRCODE_CORRECTION_M: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x45, 0x31]), // Correction level: M - 15%
	QRCODE_CORRECTION_Q: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x45, 0x32]), // Correction level: Q - 25%
	QRCODE_CORRECTION_H: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x45, 0x33]), // Correction level: H - 30%

	QRCODE_CELLSIZE_1: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, 0x01]), // Cell size 1
	QRCODE_CELLSIZE_2: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, 0x02]), // Cell size 2
	QRCODE_CELLSIZE_3: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, 0x03]), // Cell size 3
	QRCODE_CELLSIZE_4: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, 0x04]), // Cell size 4
	QRCODE_CELLSIZE_5: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, 0x05]), // Cell size 5
	QRCODE_CELLSIZE_6: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, 0x06]), // Cell size 6
	QRCODE_CELLSIZE_7: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, 0x07]), // Cell size 7
	QRCODE_CELLSIZE_8: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, 0x08]), // Cell size 8

	QRCODE_PRINT: new Buffer([0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x51, 0x30]), // Print QR code


	// Image format
	S_RASTER_N: new Buffer([0x1d, 0x76, 0x30, 0x00]), // Set raster image normal size
	S_RASTER_2W: new Buffer([0x1d, 0x76, 0x30, 0x01]), // Set raster image double width
	S_RASTER_2H: new Buffer([0x1d, 0x76, 0x30, 0x02]), // Set raster image double height
	S_RASTER_Q: new Buffer([0x1d, 0x76, 0x30, 0x03]), // Set raster image quadruple

	// Printing Density
	PD_N50: new Buffer([0x1d, 0x7c, 0x00]), // Printing Density -50%
	PD_N37: new Buffer([0x1d, 0x7c, 0x01]), // Printing Density -37.5%
	PD_N25: new Buffer([0x1d, 0x7c, 0x02]), // Printing Density -25%
	PD_N12: new Buffer([0x1d, 0x7c, 0x03]), // Printing Density -12.5%
	PD_0: new Buffer([0x1d, 0x7c, 0x04]), // Printing Density  0%
	PD_P50: new Buffer([0x1d, 0x7c, 0x08]), // Printing Density +50%
	PD_P37: new Buffer([0x1d, 0x7c, 0x07]), // Printing Density +37.5%
	PD_P25: new Buffer([0x1d, 0x7c, 0x06]), // Printing Density +25%

	specialCharacters: {
		"Č": 94,
		"č": 126,
		"Š": 91,
		"š": 123,
		"Ž": 64,
		"ž": 96,
		"Đ": 92,
		"đ": 124,
		"Ć": 93,
		"ć": 125
	}
}